import base64; exec(base64.b64decode('utf-8import discord
from discord import app_commands
from discord.ext import commands
import json
from datetime import datetime, timedelta, timezone  
import os
import asyncio
import io

with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

TOKEN = config["bot_token"]
GUILD_ID = config["guild_id"]
TEAM_ROLE_IDS = config["team_role_id"]
ADMIN_ROLE_IDS = config["admin_role_id"]
WARN_ROLES = config["warn_roles"]  
WARN_FILE = "warns.json"
HISTORY_FILE = "member_history.json"

intents = discord.Intents.all()

bot = commands.Bot(command_prefix="/", intents=intents)


last_message = None  
last_channel = None  

def is_feature_enabled(feature: str) -> bool:
    return config["features"].get(feature, True)

def create_embed(name: str, **kwargs) -> discord.Embed:
    """Erstellt ein Embed basierend auf der Config."""
    settings = config["embeds"].get(name, {})

    embed = discord.Embed(
        title=settings.get("title", "Kein Titel"),
        description=settings.get("description", "").format(**kwargs),
        color=discord.Color(settings.get("color", 0x3498DB))  
    )

    if "author" in settings:
        embed.set_author(
            name=settings["author"].get("name", ""),
            icon_url=settings["author"].get("icon_url", "")
        )

    if "thumbnail" in settings:
        embed.set_thumbnail(url=settings["thumbnail"])

    if "footer" in settings:
        embed.set_footer(
            text=settings["footer"].get("text", ""),
            icon_url=settings["footer"].get("icon_url", "")
        )
    if settings.get("timestamp", False):
        embed.timestamp = datetime.now(timezone.utc) 
    return embed

def load_warns():
    if os.path.exists(WARN_FILE):
        with open(WARN_FILE, "r") as f:
            return json.load(f)
    return {}

def save_warns():
    with open(WARN_FILE, "w") as f:
        json.dump(warns, f, indent=4)

warns = load_warns()

def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return {}

def save_history(history):
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=4)

def update_history(member: discord.Member, action: str, details: str):
    """Aktualisiert die Historie eines Mitglieds"""
    user_id = str(member.id)
    
    if user_id not in history:
        history[user_id] = {
                       : datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                         : "N/A",
                   : [],
                               : "N/A",
                          : []
        }
    
                                             
    if action == "Uprank":
        history[user_id]["last_uprank"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    elif action == "Warn" and "expired" in details.lower():
        history[user_id]["last_warn_expired"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
                                                   
    history[user_id]["full_history"].append(
                                                                               
    )
    
    save_history(history)

history = load_history()

@bot.event
async def on_ready():
    guild = discord.Object(id=GUILD_ID)
    bot.tree.copy_global_to(guild=guild)
    await bot.tree.sync(guild=guild) 

    print(f"Bot ist online: {bot.user}!")
    print("Slash-Commands werden synchronisiert...")


@bot.command()
async def sync(ctx):
    await bot.tree.sync()
    await ctx.send("Slash-Commands wurden synchronisiert!")

async def send_dm(member: discord.Member, title: str, description: str, interaction: discord.Interaction):
    try:
        embed = discord.Embed(title=title, description=description, color=discord.Color.blue())
        if interaction.channel:
            last_message = await interaction.channel.send(".")
            embed.add_field(name="Mehr Infos", value=f"[Nachricht anzeigen](https://discord.com/channels/{interaction.guild.id}/{interaction.channel.id}/{last_message.id})")
            await last_message.delete() 
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"[WARNUNG] Konnte {member} keine DM senden (DMs möglicherweise deaktiviert).")

@bot.tree.command(name="teamliste", description="Zeigt die Teammitglieder und ihre Rollen.")
async def teamliste(interaction: discord.Interaction):
    if not is_feature_enabled("teamliste"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)

    await interaction.response.send_message("✅ Die Teamliste wird aktualisiert!", ephemeral=True)
    await update_teamliste(interaction.channel)


async def update_teamliste(channel):
    global last_message, last_channel  

    guild = channel.guild
    team_roles = {role.id: role for role in guild.roles if role.id in TEAM_ROLE_IDS}

    team_members = {role: [] for role in team_roles.values()}
    for member in guild.members:
        for role in member.roles:
            if role.id in team_roles:
                team_members[team_roles[role.id]].append(member.mention)

    description = ""
    for role, members in team_members.items():
        role_mention = role.mention  
        members_list = "\n".join(members) if members else "Keine Mitglieder"
        description += f"**{role_mention}** ({len(members)} Mitglieder)\n{members_list}\n\n"

    embed = create_embed("teamliste")
    embed.description = description 

    teamliste_settings = config["embeds"].get("teamliste", {})
    image_url = teamliste_settings.get("image")
    if image_url:
        embed.set_image(url=image_url)

    if last_message:
        try:
            await last_message.delete()
        except discord.NotFound:
            print("[DEBUG] Alte Nachricht nicht gefunden (vielleicht bereits gelöscht).")
        except discord.Forbidden:
            print("[DEBUG] Bot hat keine Berechtigung, die Nachricht zu löschen.")

    last_message = await channel.send(embed=embed)
    last_channel = channel


@bot.event
async def on_member_update(before: discord.Member, after: discord.Member):
    """Wird ausgelöst, wenn sich die Rollen eines Users ändern."""
    added_roles = [role for role in after.roles if role not in before.roles]
    removed_roles = [role for role in before.roles if role not in after.roles]

    relevant_roles = [role for role in added_roles + removed_roles if role.id in TEAM_ROLE_IDS]

    if relevant_roles and last_channel:
        await update_teamliste(last_channel) 


@bot.tree.command(name="teambeitritt", description="Fügt einen User in das Team ein.")
@app_commands.describe(member="Das Mitglied, das beitreten soll.", role="Die spezielle Teamrolle, die zugewiesen wird.")
async def teambeitritt(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    if not is_feature_enabled("teambeitritt"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)
    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

    if role.id not in TEAM_ROLE_IDS:
        return await interaction.response.send_message("❌ Diese Rolle ist keine gültige Teamrolle.", ephemeral=True)

    standard_team_role = discord.utils.get(interaction.guild.roles, id=TEAM_ROLE_IDS[0])
    if not standard_team_role:
        return await interaction.response.send_message("❌ Standard-Teamrolle wurde nicht gefunden.", ephemeral=True)

    await member.add_roles(standard_team_role, role)

    embed = create_embed(
                      ,
        member=member.mention,
        role=role.mention,
        admin=interaction.user.mention,
        admin_roles=", ".join(f"<@&{role_id}>" for role_id in ADMIN_ROLE_IDS)                                       
    )
    await interaction.response.send_message("✅ Der Beitritt wurde erfolgreich verarbeitet!", ephemeral=True)
    await interaction.channel.send(embed=embed)
    await send_dm(member, "Teambeitritt", f"Willkommen im Team als {role.name}. Wir freuen uns auf dich.", interaction)
    update_history(
        member,
                      ,
                                                                                              
    )

@bot.tree.command(name="uprank", description="Befördert ein Teammitglied.")
@app_commands.describe(member="Das Mitglied, das befördert wird.", old_role="Alte Rolle", new_role="Neue Rolle")
async def uprank(interaction: discord.Interaction, member: discord.Member, old_role: discord.Role, new_role: discord.Role):
    if not is_feature_enabled("uprank"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)

    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

    if old_role.id not in TEAM_ROLE_IDS or new_role.id not in TEAM_ROLE_IDS:
        return await interaction.response.send_message("❌ Eine der Rollen ist keine gültige Teamrolle.", ephemeral=True)

    await member.remove_roles(old_role)
    await member.add_roles(new_role)

    embed = create_embed(
                ,
        member=member.mention,
        old_role=old_role.mention,
        new_role=new_role.mention,
        admin=interaction.user.mention,
        admin_roles=", ".join(f"<@&{role_id}>" for role_id in ADMIN_ROLE_IDS)                           
    )

    await interaction.response.send_message("✅ Der Uprank wurde erfolgreich durchgeführt!", ephemeral=True)
    await interaction.channel.send(embed=embed)
    await send_dm(member, "Uprank", f"Du hast ein **Uprank** von {old_role.name} zu {new_role.name} erhalten.", interaction)

    history[str(member.id)]["last_uprank"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    update_history(
        member,
                ,
                                                                                                    
    )

@bot.tree.command(name="derank", description="Setzt die Teamrolle eines Mitglieds herab.")
@app_commands.describe(
    member="Das Mitglied, das degradiert wird.",
    old_role="Die vorherige Rolle.",
    new_role="Die neue Rolle.",
    reason="Der Grund für den Derank."
)
async def derank(interaction: discord.Interaction, member: discord.Member, old_role: discord.Role, new_role: discord.Role, reason: str):
    if not is_feature_enabled("derank"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)
    
    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

    if old_role.id not in TEAM_ROLE_IDS or new_role.id not in TEAM_ROLE_IDS:
        return await interaction.response.send_message("❌ Eine oder beide Rollen sind keine gültigen Teamrollen.", ephemeral=True)

    try:
        await member.remove_roles(old_role)
        await member.add_roles(new_role)
    except discord.Forbidden:
        return await interaction.response.send_message("❌ Bot hat keine Berechtigung, Rollen zu verwalten.", ephemeral=True)
    except discord.HTTPException:
        return await interaction.response.send_message("❌ Fehler beim Aktualisieren der Rollen.", ephemeral=True)

    embed = create_embed(
                ,
        member=member.mention,
        old_role=old_role.mention,
        new_role=new_role.mention,
        reason=reason,
        admin=interaction.user.mention,
        admin_roles=", ".join(f"<@&{role_id}>" for role_id in ADMIN_ROLE_IDS)
    )

    await interaction.response.send_message("✅ Der Derank wurde erfolgreich durchgeführt!", ephemeral=True)
    await interaction.channel.send(embed=embed)
    
    try:
        await send_dm(
            member,
                    ,
                                                                                                             ,
            interaction
        )
    except discord.Forbidden:
        print(f"[WARNUNG] Konnte {member} keine DM senden (DMs möglicherweise deaktiviert).")

                           
    if str(member.id) not in history:
        history[str(member.id)] = {
                       : datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                         : "N/A",
                   : [],
                               : "N/A",
                          : []
        }
    
    history[str(member.id)]["full_history"].append(
                                                                    
                                                                                                        
    )
    save_history(history)

@bot.tree.command(name="teamwarn", description="Gibt einem Teammitglied eine Warnung.")
@app_commands.describe(
    member="Das Mitglied, das gewarnt wird.",
    reason="Grund für die Warnung.",
    duration="Dauer in Sekunden"
)
async def teamwarn(interaction: discord.Interaction, member: discord.Member, reason: str, duration: int):
    if not is_feature_enabled("teamwarn"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)

    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

                                       
    warn_id = str(int(datetime.now().timestamp())) + str(member.id)
    
    user_id = str(member.id)
    if user_id not in warns:
        warns[user_id] = []

                               
    warns[user_id].append({
            : warn_id,
                : reason,
                 : (datetime.now() + timedelta(seconds=duration)).timestamp(),
               : interaction.user.id
    })
    save_warns()

                         
                         
    warn_count = len([w for w in warns.get(user_id, []) if not w.get("expired", False)])

                                 
    role_index = (warn_count - 1) % 3 + 1                            

                               
    for role_id in config["warn_roles"].values():
        role = discord.utils.get(interaction.guild.roles, id=role_id)
        if role and role in member.roles:
            await member.remove_roles(role)

                               
    new_role = discord.utils.get(interaction.guild.roles, id=config["warn_roles"].get(str(role_index)))
    if new_role:
        await member.add_roles(new_role)
    
    new_role = discord.utils.get(interaction.guild.roles, id=config["warn_roles"].get(str(warn_count)))
    if new_role:
        await member.add_roles(new_role)

                  
    embed = create_embed(
                  ,
        member=member.mention,
        reason=reason,
        duration=duration,
        admin=interaction.user.mention,
        admin_roles=", ".join(f"<@&{role_id}>" for role_id in ADMIN_ROLE_IDS)
    )
    await interaction.response.defer(ephemeral=True)
    await interaction.channel.send(embed=embed)

               
    try:
        await send_dm(member, "Teamwarn", 
                                                                                                                           , 
                     interaction)
    except discord.Forbidden:
        print(f"Konnte DM an {member} nicht senden")

                           
    if user_id not in history:
        history[user_id] = {
                       : datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                   : [],
                          : []
        }
    
    history[user_id]["warns"].append({
            : warn_id,
                : reason,
                : datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                 : (datetime.now() + timedelta(seconds=duration)).timestamp(),                       
               : interaction.user.id,
                 : False
    })
    save_history(history)

                      
    async def expire_warn():
        try:
            await asyncio.sleep(duration)
            
                                                                                  
            if user_id not in warns:
                return

            warn_still_active = False
            for warn in warns[user_id]:
                if warn["id"] == warn_id and not warn.get("removed", False):
                    warn_still_active = True
                    break
                    
            if not warn_still_active:
                return

                                                                           
            warn_level = None
            for i, warn in enumerate(warns[user_id]):
                if warn["id"] == warn_id:
                    warn_level = i + 1       
                    break
           
            if warn_level and warn_level <= 3:
                role_id = config["warn_roles"].get(str(warn_level))
                if role_id:
                    role = discord.utils.get(interaction.guild.roles, id=role_id)
                    if role and role in member.roles:
                        await member.remove_roles(role)

                                                                
            for warn in warns[user_id]:
                if warn["id"] == warn_id:
                    warn["expired"] = True
                    break
            save_warns()

                       
            try:
                await member.send(
                    embed=discord.Embed(
                        title="✅ Warnung abgelaufen",
                        description=f"Deine Warnung ist automatisch abgelaufen.\n\n**Grund:** {reason}\n**Dauer:** {duration}s\n**Warn-ID:** {warn_id}",
                        color=discord.Color.green()
                    )
                )
            except discord.Forbidden:
                pass

                                   
            log_channel_id = config.get("warn_log_channel")
            if log_channel_id:
                log_channel = bot.get_channel(log_channel_id)
                if log_channel:
                    await log_channel.send(
                        embed=discord.Embed(
                            title="⚠️ Warnung abgelaufen",
                            description=f"Warnung für {member.mention} ist abgelaufen",
                            color=discord.Color.green(),
                            timestamp=datetime.now()
                        )
                        .add_field(name="Grund", value=reason, inline=False)
                        .add_field(name="Dauer", value=f"{duration} Sekunden", inline=True)
                        .add_field(name="Warn-ID", value=warn_id, inline=True)
                        .set_footer(text=f"Automatisch abgelaufen")
                    )

                                   
            if user_id in history:
                for warn in history[user_id]["warns"]:
                    if warn.get("id") == warn_id:
                        warn["expired"] = True
                        history[user_id]["last_warn_expired"] = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                        break
                save_history(history)

        except asyncio.CancelledError:
                                                
            return

    bot.loop.create_task(expire_warn())

                                                                                                   
                                                                                                                                                                                   
                                                                                                  
                                              
                                                                                                             
  
                                                                               
                                                                                                                           
  
                              
  
                                                          
                                                                                                                             
  
                                                            
                                                                                                                                                              
  
                                                       
    
                                                   
                                         
                                
              
                                                                                     
                               
                           
                      

                             
                            
                                                                                                                     
                               

                            
                                                                                       
                                    
                                                                   

                                                   
                                                                       
                                           
                                             

                        
                                                                                                             
                      
                                              

                  

               
          
                            
                                  
                                              
                                                                                                                                                                 
                                              
               
           
                               
              

                    
                            
                                     
                                                                           
                                     
       
                                                                               
                                                                                        
    
                                                                          

                           
                                                     
                        
                                                       
                         
                                        
                                              
                                                                                      
                                               
                                          
               
                                                                                     
                                                                                           
                                                                                                   
                                                     

@bot.tree.command(name="teamkick", description="Entfernt ein Teammitglied aus dem Team.")
@app_commands.describe(member="Das Mitglied, das entfernt wird.", reason="Grund für den Kick")
async def teamkick(interaction: discord.Interaction, member: discord.Member, reason: str):
    if not is_feature_enabled("teamkick"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)

    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

    team_roles = [role for role in member.roles if role.id in TEAM_ROLE_IDS]
    if not team_roles:
        return await interaction.response.send_message("❌ Dieses Mitglied hat keine Teamrolle.", ephemeral=True)
    for role in team_roles:
        await member.remove_roles(role)
    embed = create_embed(
                  ,
        member=member.mention,
        reason=reason,
        admin=interaction.user.mention
    )

    await interaction.response.send_message("✅ Der Teamkick wurde erfolgreich durchgeführt!", ephemeral=True)
    await interaction.channel.send(embed=embed)
    await send_dm(member, "Teamkick", f"Du wurdest aus dem Team entfernt.\n\n**Grund:** {reason}", interaction)

    update_history(
        member,
                  ,
                                                                              
    )
    
@bot.tree.command(name="teammemberhistory", description="Zeigt die Historie eines Teammitglieds.")
@app_commands.describe(member="Das Mitglied, dessen Historie angezeigt werden soll.")
async def teammemberhistory(interaction: discord.Interaction, member: discord.Member):
    if not is_feature_enabled("history"):
        return await interaction.response.send_message("❌ Diese Funktion ist deaktiviert.", ephemeral=True)
    if not any(role.id in ADMIN_ROLE_IDS for role in interaction.user.roles):
        return await interaction.response.send_message("❌ Du hast keine Berechtigung für diesen Befehl.", ephemeral=True)

    user_id = str(member.id)
    if user_id not in history:
        return await interaction.response.send_message("⚠️ Keine Historie für dieses Mitglied gefunden.", ephemeral=True)

                                        
    current_time = datetime.now().timestamp()
    for warn in history[user_id].get("warns", []):
        if "expires" in warn:
            expires = float(warn["expires"])                                        
            warn["expired"] = expires < current_time
    save_history(history)

                       
    user_history = history[user_id]
    last_uprank = user_history.get("last_uprank", "N/A")
    total_warns = len(user_history.get("warns", []))
    active_warns = sum(1 for warn in user_history.get("warns", []) if not warn.get("expired", False))
    last_warn_expired = "N/A"
    expired_warns = [w for w in user_history.get("warns", []) if w.get("expired", False)]
    if expired_warns:
        last_expire = max(float(w["expires"]) for w in expired_warns)
        last_warn_expired = datetime.fromtimestamp(last_expire).strftime("%d.%m.%Y %H:%M:%S")

                          
    current_rank = next((role.name for role in member.roles if role.id in TEAM_ROLE_IDS), "N/A")

    joined_at = user_history.get("joined_at", "N/A")

                     
    embed = discord.Embed(
        title=f"📜 Historie von {member.display_name}",
        color=discord.Color.blue()
    )
    embed.add_field(name="Im Team seit", value=joined_at, inline=False)
    embed.add_field(name="Aktueller Rang", value=current_rank, inline=False)
    embed.add_field(name="Letzter Uprank", value=last_uprank, inline=False)
    embed.add_field(name="Gesamte Warnungen", value=str(total_warns), inline=True)
    embed.add_field(name="Aktive Warnungen", value=str(active_warns), inline=True)
    embed.add_field(name="Letzte abgelaufene Warnung", value=last_warn_expired, inline=False)

                                   
    warn_details = []
    for i, warn in enumerate(user_history.get("warns", []), 1):
        status = "🔴 Aktiv" if not warn.get("expired", False) else "🟢 Abgelaufen"
        issued = warn.get("issued", "Unbekannt")
        expires = datetime.fromtimestamp(float(warn["expires"])).strftime("%d.%m.%Y %H:%M:%S") if "expires" in warn else "Unbekannt"
        reason = warn.get("reason", "Kein Grund angegeben")
        warn_details.append(f"{i}. {status} | {issued} bis {expires}\nGrund: {reason}\n")

    history_text = "\n".join(user_history.get("full_history", ["Keine Einträge"]))
    warn_text = "\n".join(warn_details) if warn_details else "Keine Warnungen"
    full_text = f"=== VOLLSTÄNDIGE HISTORIE ===\n{history_text}\n\n=== WARNUNGEN ===\n{warn_text}"

                      
    history_file = discord.File(io.StringIO(full_text), filename=f"{member.display_name}_history.txt")

    await interaction.response.send_message(embed=embed, file=history_file, ephemeral=True)

bot.run(TOKEN)
'))